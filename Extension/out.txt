Project Path: ./

Source Tree:

```
└── buildWatch.sh
└── extension
    ├── assets
    ├── background.js
    ├── content.js
    ├── index.html
└── index.html
└── out.txt
└── postcss.config.cjs
└── readme.md
└── src
    ├── App.css
    ├── App.jsx
    ├── components
    │   ├── ui
    │   │   └── alert.jsx
    │   │   └── button.jsx
    │   │   └── card.jsx
    │   │   └── scroll-area.jsx
    ├── index.css
    ├── lib
    │   ├── utils.js
    ├── main.jsx
└── tailwind.config.cjs
└── tailwind.config.js
└── vite.config.js
```

`buildWatch.sh`:

``````sh
npx nodemon \ --watch "src" \ --watch "extension" \ --ignore "extension/dist" \ --ignore "node_modules" \ --ext "js,jsx,json,html,css" \ --exec "yarn build && echo 'Build completed'" \ --verbose
``````

`extension/background.js`:

``````js
const config = [ { "id": 1, "name": "Search Google", "description": "Performs a Google search", "url": null, "commandToExecute": [ { "event": "INPUT", "selector": "form textarea", "value": "Hi" }, { "event": "CLICK", "selector": "input[name='btnK']" } ] }, ]; chrome.runtime.onInstalled.addListener(() => { console.log('Extension installed'); }); chrome.runtime.onMessage.addListener((request, sender, sendResponse) => { console.log('Background script received message:', request); if (request.action === 'getConfig') { console.log('Sending config:', config); sendResponse({ config: config }); return true; } else if (request.action === 'executeCommand') { chrome.tabs.sendMessage(sender.tab.id, request); sendResponse({ status: "Command execution started" }); return true; } });
``````

`extension/content.js`:

``````js
let configMap = []; function fetchConfig() { return new Promise((resolve, reject) => { chrome.runtime.sendMessage({ action: 'getConfig' }, (response) => { if (chrome.runtime.lastError) { reject(chrome.runtime.lastError); } else if (response && response.config) { resolve(response.config); } else { reject('Failed to fetch config from background script'); } }); }); } async function executeSingleCommand(command) { const element = document.querySelector(command.selector); if (!element) { return; } switch (command.event) { case "CLICK": element.click(); break; case "INPUT": element.value = command.value; element.dispatchEvent(new Event("input", { bubbles: true })); break; case "SUBMIT": if (element.tagName.toLowerCase() === "form") { element.submit(); } break; } await new Promise((resolve) => setTimeout(resolve, 500)); } async function executeCommand(commandToExecute) { for (const command of commandToExecute) { await executeSingleCommand(command); } } async function checkAndExecuteCommands() { const currentUrl = window.location.href; for (const config of configMap) { if (currentUrl.includes(config.url)) { await executeCommand(config.commandToExecute); } } } chrome.runtime.onMessage.addListener((request, sender, sendResponse) => { if (request.action === "checkAndExecute") { checkAndExecuteCommands(); sendResponse({ status: "Checking and executing commands" }); } else if (request.action === "executeCommand") { if (request.command) { executeCommand(request.command); sendResponse({ status: "Command execution started" }); } else { sendResponse({ status: "Command not found" }); } } return true; }); async function init() { try { configMap = await fetchConfig(); console.log("INIT", configMap); checkAndExecuteCommands(); } catch (error) { } } init();
``````

`extension/index.html`:

``````html
<!DOCTYPE html> <html lang="en"> <head> <meta charset="UTF-8" /> <meta name="viewport" content="width=device-width, initial-scale=1.0" /> <title>Vite + React</title> <script type="module" crossorigin src="/dist/custom.js"></script> <link rel="stylesheet" href="/dist/index.css"> </head> <body> <div id="app_001"></div> </body> </html>
``````

`index.html`:

``````html
<!DOCTYPE html> <html lang="en"> <head> <meta charset="UTF-8" /> <link rel="icon" type="image/svg+xml" href="/vite.svg" /> <meta name="viewport" content="width=device-width, initial-scale=1.0" /> <title>Vite</title> </head> <body> <div id="app_001"></div> <script type="module" src="/src/main.jsx"></script> </body> </html>
``````

`out.txt`:

``````txt
Project Path: ./ Source Tree: ``` └── buildWatch.sh └── extension ├── assets ├── background.js ├── content.js ├── index.html └── index.html └── postcss.config.cjs └── readme.md └── src ├── App.css ├── App.jsx ├── components │ ├── ui │ │ └── alert.jsx │ │ └── button.jsx │ │ └── card.jsx │ │ └── scroll-area.jsx ├── index.css ├── lib │ ├── utils.js ├── main.jsx └── tailwind.config.cjs └── tailwind.config.js └── vite.config.js ``` `buildWatch.sh`: ``````sh npx nodemon \ --watch "src" \ --watch "extension" \ --ignore "extension/dist" \ --ignore "node_modules" \ --ext "js,jsx,json,html,css" \ --exec "yarn build && echo 'Build completed'" \ --verbose `````` `extension/background.js`: ``````js const config = [ { "id": 1, "name": "Search Google", "description": "Performs a Google search", "url": null, "commandToExecute": [ { "event": "INPUT", "selector": "form textarea", "value": "Hi" }, { "event": "CLICK", "selector": "input[name='btnK']" } ] }, ]; chrome.runtime.onInstalled.addListener(() => { console.log('Extension installed'); }); chrome.runtime.onMessage.addListener((request, sender, sendResponse) => { console.log('Background script received message:', request); if (request.action === 'getConfig') { console.log('Sending config:', config); sendResponse({ config: config }); return true; } else if (request.action === 'executeCommand') { chrome.tabs.sendMessage(sender.tab.id, request); sendResponse({ status: "Command execution started" }); return true; } }); `````` `extension/content.js`: ``````js let configMap = []; function fetchConfig() { return new Promise((resolve, reject) => { chrome.runtime.sendMessage({ action: 'getConfig' }, (response) => { if (chrome.runtime.lastError) { reject(chrome.runtime.lastError); } else if (response && response.config) { resolve(response.config); } else { reject('Failed to fetch config from background script'); } }); }); } async function executeSingleCommand(command) { const element = document.querySelector(command.selector); if (!element) { return; } switch (command.event) { case "CLICK": element.click(); break; case "INPUT": element.value = command.value; element.dispatchEvent(new Event("input", { bubbles: true })); break; case "SUBMIT": if (element.tagName.toLowerCase() === "form") { element.submit(); } break; } await new Promise((resolve) => setTimeout(resolve, 500)); } async function executeCommand(commandToExecute) { for (const command of commandToExecute) { await executeSingleCommand(command); } } async function checkAndExecuteCommands() { const currentUrl = window.location.href; for (const config of configMap) { if (currentUrl.includes(config.url)) { await executeCommand(config.commandToExecute); } } } chrome.runtime.onMessage.addListener((request, sender, sendResponse) => { if (request.action === "checkAndExecute") { checkAndExecuteCommands(); sendResponse({ status: "Checking and executing commands" }); } else if (request.action === "executeCommand") { if (request.command) { executeCommand(request.command); sendResponse({ status: "Command execution started" }); } else { sendResponse({ status: "Command not found" }); } } return true; }); async function init() { try { configMap = await fetchConfig(); console.log("INIT", configMap); checkAndExecuteCommands(); } catch (error) { } } init(); `````` `extension/index.html`: ``````html <!DOCTYPE html> <html lang="en"> <head> <meta charset="UTF-8" /> <meta name="viewport" content="width=device-width, initial-scale=1.0" /> <title>Vite + React</title> <script type="module" crossorigin src="/dist/custom.js"></script> <link rel="stylesheet" href="/dist/index.css"> </head> <body> <div id="app_001"></div> </body> </html> `````` `index.html`: ``````html <!DOCTYPE html> <html lang="en"> <head> <meta charset="UTF-8" /> <link rel="icon" type="image/svg+xml" href="/vite.svg" /> <meta name="viewport" content="width=device-width, initial-scale=1.0" /> <title>Vite</title> </head> <body> <div id="app_001"></div> <script type="module" src="/src/main.jsx"></script> </body> </html> `````` `postcss.config.cjs`: ``````cjs module.exports = { plugins: { tailwindcss: {}, autoprefixer: {}, }, } `````` `readme.md`: ``````md `````` `src/App.css`: ``````css body{ min-width: 400px } `````` `src/App.jsx`: ``````jsx import React, { useState, useEffect } from 'react'; import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card" import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert" import { Button } from '@/components/ui/button'; export default function App() { const [commands, setCommands] = useState([]); const [lastExecuted, setLastExecuted] = useState(null); const [loading, setLoading] = useState(true); const [error, setError] = useState(null); useEffect(() => { setLoading(true); chrome.runtime.sendMessage({ action: 'getConfig' }, (response) => { if (chrome.runtime.lastError) { setError(chrome.runtime.lastError.message); } else if (response && response.config) { setCommands(response.config); } else { setError('Failed to load config'); } setLoading(false); }); }, []); const handleCommandClick = (command) => { chrome.tabs.query({active: true, currentWindow: true}, function(tabs) { chrome.tabs.sendMessage(tabs[0].id, { action: 'executeCommand', command: command.commandToExecute }, function(response) { console.log(response); setLastExecuted(command.name); }); }); }; if (loading) { return <div className="p-4">Loading...</div>; } if (error) { return ( <Alert variant="destructive" className="m-4"> <AlertTitle>Error</AlertTitle> <AlertDescription>{error}</AlertDescription> </Alert> ); } return ( <div className="p-4 max-w-4xl mx-auto"> <Card className="mb-6"> <CardHeader> <CardTitle>Available Commands</CardTitle> <CardDescription>Select a command to execute</CardDescription> </CardHeader> </Card> <div className="grid gap-4 md:grid-cols-2"> {commands.map((command) => ( <Card key={command.id}> <CardHeader> <CardTitle>{command.name}</CardTitle> <CardDescription>{command.description}</CardDescription> </CardHeader> <CardFooter> <Button className="bg-slate-800 text-white hover:bg-slate-700" onClick={() => handleCommandClick(command)} > Execute </Button> </CardFooter> </Card> ))} </div> {lastExecuted && ( <Alert className="mt-6"> <AlertTitle>Command Executed</AlertTitle> <AlertDescription> Last executed command: {lastExecuted} </AlertDescription> </Alert> )} </div> ); } `````` `src/components/ui/alert.jsx`: ``````jsx import * as React from "react" import { cva } from "class-variance-authority"; import { cn } from "@/lib/utils" const alertVariants = cva( "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground", { variants: { variant: { default: "bg-background text-foreground", destructive: "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive", }, }, defaultVariants: { variant: "default", }, } ) const Alert = React.forwardRef(({ className, variant, ...props }, ref) => ( <div ref={ref} role="alert" className={cn(alertVariants({ variant }), className)} {...props} /> )) Alert.displayName = "Alert" const AlertTitle = React.forwardRef(({ className, ...props }, ref) => ( <h5 ref={ref} className={cn("mb-1 font-medium leading-none tracking-tight", className)} {...props} /> )) AlertTitle.displayName = "AlertTitle" const AlertDescription = React.forwardRef(({ className, ...props }, ref) => ( <div ref={ref} className={cn("text-sm [&_p]:leading-relaxed", className)} {...props} /> )) AlertDescription.displayName = "AlertDescription" export { Alert, AlertTitle, AlertDescription } `````` `src/components/ui/button.jsx`: ``````jsx import * as React from "react" import { Slot } from "@radix-ui/react-slot" import { cva } from "class-variance-authority"; import { cn } from "@/lib/utils" const buttonVariants = cva( "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50", { variants: { variant: { default: "bg-primary text-primary-foreground hover:bg-primary/90", destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90", outline: "border border-input bg-background hover:bg-accent hover:text-accent-foreground", secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80", ghost: "hover:bg-accent hover:text-accent-foreground", link: "text-primary underline-offset-4 hover:underline", }, size: { default: "h-10 px-4 py-2", sm: "h-9 rounded-md px-3", lg: "h-11 rounded-md px-8", icon: "h-10 w-10", }, }, defaultVariants: { variant: "default", size: "default", }, } ) const Button = React.forwardRef(({ className, variant, size, asChild = false, ...props }, ref) => { const Comp = asChild ? Slot : "button" return ( (<Comp className={cn(buttonVariants({ variant, size, className }))} ref={ref} {...props} />) ); }) Button.displayName = "Button" export { Button, buttonVariants } `````` `src/components/ui/card.jsx`: ``````jsx import * as React from "react" import { cn } from "@/lib/utils" const Card = React.forwardRef(({ className, ...props }, ref) => ( <div ref={ref} className={cn("rounded-lg border bg-card text-card-foreground shadow-sm", className)} {...props} /> )) Card.displayName = "Card" const CardHeader = React.forwardRef(({ className, ...props }, ref) => ( <div ref={ref} className={cn("flex flex-col space-y-1.5 p-6", className)} {...props} /> )) CardHeader.displayName = "CardHeader" const CardTitle = React.forwardRef(({ className, ...props }, ref) => ( <h3 ref={ref} className={cn("text-2xl font-semibold leading-none tracking-tight", className)} {...props} /> )) CardTitle.displayName = "CardTitle" const CardDescription = React.forwardRef(({ className, ...props }, ref) => ( <p ref={ref} className={cn("text-sm text-muted-foreground", className)} {...props} /> )) CardDescription.displayName = "CardDescription" const CardContent = React.forwardRef(({ className, ...props }, ref) => ( <div ref={ref} className={cn("p-6 pt-0", className)} {...props} /> )) CardContent.displayName = "CardContent" const CardFooter = React.forwardRef(({ className, ...props }, ref) => ( <div ref={ref} className={cn("flex items-center p-6 pt-0", className)} {...props} /> )) CardFooter.displayName = "CardFooter" export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent } `````` `src/components/ui/scroll-area.jsx`: ``````jsx import * as React from "react" import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area" import { cn } from "@/lib/utils" const ScrollArea = React.forwardRef(({ className, children, ...props }, ref) => ( <ScrollAreaPrimitive.Root ref={ref} className={cn("relative overflow-hidden", className)} {...props}> <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]"> {children} </ScrollAreaPrimitive.Viewport> <ScrollBar /> <ScrollAreaPrimitive.Corner /> </ScrollAreaPrimitive.Root> )) ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName const ScrollBar = React.forwardRef(({ className, orientation = "vertical", ...props }, ref) => ( <ScrollAreaPrimitive.ScrollAreaScrollbar ref={ref} orientation={orientation} className={cn( "flex touch-none select-none transition-colors", orientation === "vertical" && "h-full w-2.5 border-l border-l-transparent p-[1px]", orientation === "horizontal" && "h-2.5 flex-col border-t border-t-transparent p-[1px]", className )} {...props}> <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" /> </ScrollAreaPrimitive.ScrollAreaScrollbar> )) ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName export { ScrollArea, ScrollBar } `````` `src/index.css`: ``````css :root{ --primary: #2e2e2e; } @tailwind base; @tailwind components; @tailwind utilities; @layer base { :root { --background: #ffffff; --foreground: #0a0a0a; --card: #ffffff; --card-foreground: #0a0a0a; --popover: #ffffff; --popover-foreground: #0a0a0a; --textPrimary: #2e2e2e; --primary: #2e2e2e; --primary-foreground: #f7f7f7; --secondary: #f5f5f5; --secondary-foreground: #2e2e2e; --muted: #f5f5f5; --muted-foreground: #7a7a7a; --accent: #f5f5f5; --accent-foreground: #2e2e2e; --destructive: #ff3b30; --destructive-foreground: #f7f7f7; --border: #e8e8e8; --input: #e8e8e8; --ring: #0a0a0a; --radius: 0.5rem; } .dark { --background: #0a0a0a; --foreground: #f7f7f7; --card: #00000095; --card-foreground: #f7f7f7; --popover: #0a0a0a; --popover-foreground: #f7f7f7; --primary: #363636a1; --primary-foreground: #ffffff; --textPrimary: #f7f7f7; --secondary: #2c2c2c; --secondary-foreground: #f7f7f7; --muted: #2c2c2c; --muted-foreground: #a6a6a6; --accent: #2c2c2c; --accent-foreground: #f7f7f7; --destructive: #ff453a; --destructive-foreground: #f7f7f7; --border: #2c2c2c; --input: #2c2c2c; --ring: #d8d8d8; --tw-ring-offset-color: #0a0a0a; } } `````` `src/lib/utils.js`: ``````js import { clsx } from "clsx" import { twMerge } from "tailwind-merge" export function cn(...inputs) { return twMerge(clsx(inputs)) } `````` `src/main.jsx`: ``````jsx import React from 'react' import ReactDOM from 'react-dom/client' import App from './App' import './index.css' import './App.css' ReactDOM.createRoot(document.getElementById('app_001')).render( <App /> ) `````` `tailwind.config.cjs`: ``````cjs /** @type {import('tailwindcss').Config} */ module.exports = { darkMode: ["class"], content: [ './pages/**/*.{js,jsx}', './components/**/*.{js,jsx}', './app/**/*.{js,jsx}', './src/**/*.{js,jsx}', ], prefix: "", theme: { container: { center: true, padding: "2rem", screens: { "2xl": "1400px", }, }, extend: { keyframes: { "accordion-down": { from: { height: "0" }, to: { height: "var(--radix-accordion-content-height)" }, }, "accordion-up": { from: { height: "var(--radix-accordion-content-height)" }, to: { height: "0" }, }, }, animation: { "accordion-down": "accordion-down 0.2s ease-out", "accordion-up": "accordion-up 0.2s ease-out", }, }, }, plugins: [require("tailwindcss-animate")], } `````` `tailwind.config.js`: ``````js module.exports = { darkMode: ["class"], content: [ './pages*.{js,jsx}', './components*.{js,jsx}', './app*.{js,jsx}', './src*.{js,jsx}', ], prefix: "", theme: { container: { center: true, padding: "2rem", screens: { "2xl": "1400px", }, }, extend: { colors: { border: "hsl(var(--border))", input: "hsl(var(--input))", ring: "hsl(var(--ring))", background: "hsl(var(--background))", foreground: "hsl(var(--foreground))", primary: { DEFAULT: "hsl(var(--primary))", foreground: "hsl(var(--primary-foreground))", }, secondary: { DEFAULT: "hsl(var(--secondary))", foreground: "hsl(var(--secondary-foreground))", }, destructive: { DEFAULT: "hsl(var(--destructive))", foreground: "hsl(var(--destructive-foreground))", }, muted: { DEFAULT: "hsl(var(--muted))", foreground: "hsl(var(--muted-foreground))", }, accent: { DEFAULT: "hsl(var(--accent))", foreground: "hsl(var(--accent-foreground))", }, popover: { DEFAULT: "hsl(var(--popover))", foreground: "hsl(var(--popover-foreground))", }, card: { DEFAULT: "hsl(var(--card))", foreground: "hsl(var(--card-foreground))", }, }, borderRadius: { lg: "var(--radius)", md: "calc(var(--radius) - 2px)", sm: "calc(var(--radius) - 4px)", }, keyframes: { "accordion-down": { from: { height: 0 }, to: { height: "var(--radix-accordion-content-height)" }, }, "accordion-up": { from: { height: "var(--radix-accordion-content-height)" }, to: { height: 0 }, }, }, animation: { "accordion-down": "accordion-down 0.2s ease-out", "accordion-up": "accordion-up 0.2s ease-out", }, }, }, plugins: [require("tailwindcss-animate")], } `````` `vite.config.js`: ``````js import { defineConfig } from 'vite' import react from '@vitejs/plugin-react' import path from 'path' export default defineConfig({ plugins: [react()], resolve: { alias: { '@': path.resolve(__dirname, './src'), }, }, build: { outDir: 'extension/dist', rollupOptions: { output: { entryFileNames: `${process.env.COMPONENT || 'custom'}.js`, assetFileNames: `[name].[ext]` } } } }) ``````
``````

`postcss.config.cjs`:

``````cjs
module.exports = { plugins: { tailwindcss: {}, autoprefixer: {}, }, }
``````

`readme.md`:

``````md

``````

`src/App.css`:

``````css
body{ min-width: 400px }
``````

`src/App.jsx`:

``````jsx
import React, { useState, useEffect } from 'react'; import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card" import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert" import { Button } from '@/components/ui/button'; export default function App() { const [commands, setCommands] = useState([]); const [lastExecuted, setLastExecuted] = useState(null); const [loading, setLoading] = useState(true); const [error, setError] = useState(null); useEffect(() => { setLoading(true); chrome.runtime.sendMessage({ action: 'getConfig' }, (response) => { if (chrome.runtime.lastError) { setError(chrome.runtime.lastError.message); } else if (response && response.config) { setCommands(response.config); } else { setError('Failed to load config'); } setLoading(false); }); }, []); const handleCommandClick = (command) => { chrome.tabs.query({active: true, currentWindow: true}, function(tabs) { chrome.tabs.sendMessage(tabs[0].id, { action: 'executeCommand', command: command.commandToExecute }, function(response) { console.log(response); setLastExecuted(command.name); }); }); }; if (loading) { return <div className="p-4">Loading...</div>; } if (error) { return ( <Alert variant="destructive" className="m-4"> <AlertTitle>Error</AlertTitle> <AlertDescription>{error}</AlertDescription> </Alert> ); } return ( <div className="p-4 max-w-4xl mx-auto"> <Card className="mb-6"> <CardHeader> <CardTitle>Available Commands</CardTitle> <CardDescription>Select a command to execute</CardDescription> </CardHeader> </Card> <div className="grid gap-4 md:grid-cols-2"> {commands.map((command) => ( <Card key={command.id}> <CardHeader> <CardTitle>{command.name}</CardTitle> <CardDescription>{command.description}</CardDescription> </CardHeader> <CardFooter> <Button className="bg-slate-800 text-white hover:bg-slate-700" onClick={() => handleCommandClick(command)} > Execute </Button> </CardFooter> </Card> ))} </div> {lastExecuted && ( <Alert className="mt-6"> <AlertTitle>Command Executed</AlertTitle> <AlertDescription> Last executed command: {lastExecuted} </AlertDescription> </Alert> )} </div> ); }
``````

`src/components/ui/alert.jsx`:

``````jsx
import * as React from "react" import { cva } from "class-variance-authority"; import { cn } from "@/lib/utils" const alertVariants = cva( "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground", { variants: { variant: { default: "bg-background text-foreground", destructive: "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive", }, }, defaultVariants: { variant: "default", }, } ) const Alert = React.forwardRef(({ className, variant, ...props }, ref) => ( <div ref={ref} role="alert" className={cn(alertVariants({ variant }), className)} {...props} /> )) Alert.displayName = "Alert" const AlertTitle = React.forwardRef(({ className, ...props }, ref) => ( <h5 ref={ref} className={cn("mb-1 font-medium leading-none tracking-tight", className)} {...props} /> )) AlertTitle.displayName = "AlertTitle" const AlertDescription = React.forwardRef(({ className, ...props }, ref) => ( <div ref={ref} className={cn("text-sm [&_p]:leading-relaxed", className)} {...props} /> )) AlertDescription.displayName = "AlertDescription" export { Alert, AlertTitle, AlertDescription }
``````

`src/components/ui/button.jsx`:

``````jsx
import * as React from "react" import { Slot } from "@radix-ui/react-slot" import { cva } from "class-variance-authority"; import { cn } from "@/lib/utils" const buttonVariants = cva( "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50", { variants: { variant: { default: "bg-primary text-primary-foreground hover:bg-primary/90", destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90", outline: "border border-input bg-background hover:bg-accent hover:text-accent-foreground", secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80", ghost: "hover:bg-accent hover:text-accent-foreground", link: "text-primary underline-offset-4 hover:underline", }, size: { default: "h-10 px-4 py-2", sm: "h-9 rounded-md px-3", lg: "h-11 rounded-md px-8", icon: "h-10 w-10", }, }, defaultVariants: { variant: "default", size: "default", }, } ) const Button = React.forwardRef(({ className, variant, size, asChild = false, ...props }, ref) => { const Comp = asChild ? Slot : "button" return ( (<Comp className={cn(buttonVariants({ variant, size, className }))} ref={ref} {...props} />) ); }) Button.displayName = "Button" export { Button, buttonVariants }
``````

`src/components/ui/card.jsx`:

``````jsx
import * as React from "react" import { cn } from "@/lib/utils" const Card = React.forwardRef(({ className, ...props }, ref) => ( <div ref={ref} className={cn("rounded-lg border bg-card text-card-foreground shadow-sm", className)} {...props} /> )) Card.displayName = "Card" const CardHeader = React.forwardRef(({ className, ...props }, ref) => ( <div ref={ref} className={cn("flex flex-col space-y-1.5 p-6", className)} {...props} /> )) CardHeader.displayName = "CardHeader" const CardTitle = React.forwardRef(({ className, ...props }, ref) => ( <h3 ref={ref} className={cn("text-2xl font-semibold leading-none tracking-tight", className)} {...props} /> )) CardTitle.displayName = "CardTitle" const CardDescription = React.forwardRef(({ className, ...props }, ref) => ( <p ref={ref} className={cn("text-sm text-muted-foreground", className)} {...props} /> )) CardDescription.displayName = "CardDescription" const CardContent = React.forwardRef(({ className, ...props }, ref) => ( <div ref={ref} className={cn("p-6 pt-0", className)} {...props} /> )) CardContent.displayName = "CardContent" const CardFooter = React.forwardRef(({ className, ...props }, ref) => ( <div ref={ref} className={cn("flex items-center p-6 pt-0", className)} {...props} /> )) CardFooter.displayName = "CardFooter" export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
``````

`src/components/ui/scroll-area.jsx`:

``````jsx
import * as React from "react" import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area" import { cn } from "@/lib/utils" const ScrollArea = React.forwardRef(({ className, children, ...props }, ref) => ( <ScrollAreaPrimitive.Root ref={ref} className={cn("relative overflow-hidden", className)} {...props}> <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]"> {children} </ScrollAreaPrimitive.Viewport> <ScrollBar /> <ScrollAreaPrimitive.Corner /> </ScrollAreaPrimitive.Root> )) ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName const ScrollBar = React.forwardRef(({ className, orientation = "vertical", ...props }, ref) => ( <ScrollAreaPrimitive.ScrollAreaScrollbar ref={ref} orientation={orientation} className={cn( "flex touch-none select-none transition-colors", orientation === "vertical" && "h-full w-2.5 border-l border-l-transparent p-[1px]", orientation === "horizontal" && "h-2.5 flex-col border-t border-t-transparent p-[1px]", className )} {...props}> <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" /> </ScrollAreaPrimitive.ScrollAreaScrollbar> )) ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName export { ScrollArea, ScrollBar }
``````

`src/index.css`:

``````css
:root{ --primary: #2e2e2e; } @tailwind base; @tailwind components; @tailwind utilities; @layer base { :root { --background: #ffffff; --foreground: #0a0a0a; --card: #ffffff; --card-foreground: #0a0a0a; --popover: #ffffff; --popover-foreground: #0a0a0a; --textPrimary: #2e2e2e; --primary: #2e2e2e; --primary-foreground: #f7f7f7; --secondary: #f5f5f5; --secondary-foreground: #2e2e2e; --muted: #f5f5f5; --muted-foreground: #7a7a7a; --accent: #f5f5f5; --accent-foreground: #2e2e2e; --destructive: #ff3b30; --destructive-foreground: #f7f7f7; --border: #e8e8e8; --input: #e8e8e8; --ring: #0a0a0a; --radius: 0.5rem; } .dark { --background: #0a0a0a; --foreground: #f7f7f7; --card: #00000095; --card-foreground: #f7f7f7; --popover: #0a0a0a; --popover-foreground: #f7f7f7; --primary: #363636a1; --primary-foreground: #ffffff; --textPrimary: #f7f7f7; --secondary: #2c2c2c; --secondary-foreground: #f7f7f7; --muted: #2c2c2c; --muted-foreground: #a6a6a6; --accent: #2c2c2c; --accent-foreground: #f7f7f7; --destructive: #ff453a; --destructive-foreground: #f7f7f7; --border: #2c2c2c; --input: #2c2c2c; --ring: #d8d8d8; --tw-ring-offset-color: #0a0a0a; } }
``````

`src/lib/utils.js`:

``````js
import { clsx } from "clsx" import { twMerge } from "tailwind-merge" export function cn(...inputs) { return twMerge(clsx(inputs)) }
``````

`src/main.jsx`:

``````jsx
import React from 'react' import ReactDOM from 'react-dom/client' import App from './App' import './index.css' import './App.css' ReactDOM.createRoot(document.getElementById('app_001')).render( <App /> )
``````

`tailwind.config.cjs`:

``````cjs
/** @type {import('tailwindcss').Config} */ module.exports = { darkMode: ["class"], content: [ './pages/**/*.{js,jsx}', './components/**/*.{js,jsx}', './app/**/*.{js,jsx}', './src/**/*.{js,jsx}', ], prefix: "", theme: { container: { center: true, padding: "2rem", screens: { "2xl": "1400px", }, }, extend: { keyframes: { "accordion-down": { from: { height: "0" }, to: { height: "var(--radix-accordion-content-height)" }, }, "accordion-up": { from: { height: "var(--radix-accordion-content-height)" }, to: { height: "0" }, }, }, animation: { "accordion-down": "accordion-down 0.2s ease-out", "accordion-up": "accordion-up 0.2s ease-out", }, }, }, plugins: [require("tailwindcss-animate")], }
``````

`tailwind.config.js`:

``````js
module.exports = { darkMode: ["class"], content: [ './pages*.{js,jsx}', './components*.{js,jsx}', './app*.{js,jsx}', './src*.{js,jsx}', ], prefix: "", theme: { container: { center: true, padding: "2rem", screens: { "2xl": "1400px", }, }, extend: { colors: { border: "hsl(var(--border))", input: "hsl(var(--input))", ring: "hsl(var(--ring))", background: "hsl(var(--background))", foreground: "hsl(var(--foreground))", primary: { DEFAULT: "hsl(var(--primary))", foreground: "hsl(var(--primary-foreground))", }, secondary: { DEFAULT: "hsl(var(--secondary))", foreground: "hsl(var(--secondary-foreground))", }, destructive: { DEFAULT: "hsl(var(--destructive))", foreground: "hsl(var(--destructive-foreground))", }, muted: { DEFAULT: "hsl(var(--muted))", foreground: "hsl(var(--muted-foreground))", }, accent: { DEFAULT: "hsl(var(--accent))", foreground: "hsl(var(--accent-foreground))", }, popover: { DEFAULT: "hsl(var(--popover))", foreground: "hsl(var(--popover-foreground))", }, card: { DEFAULT: "hsl(var(--card))", foreground: "hsl(var(--card-foreground))", }, }, borderRadius: { lg: "var(--radius)", md: "calc(var(--radius) - 2px)", sm: "calc(var(--radius) - 4px)", }, keyframes: { "accordion-down": { from: { height: 0 }, to: { height: "var(--radix-accordion-content-height)" }, }, "accordion-up": { from: { height: "var(--radix-accordion-content-height)" }, to: { height: 0 }, }, }, animation: { "accordion-down": "accordion-down 0.2s ease-out", "accordion-up": "accordion-up 0.2s ease-out", }, }, }, plugins: [require("tailwindcss-animate")], }
``````

`vite.config.js`:

``````js
import { defineConfig } from 'vite' import react from '@vitejs/plugin-react' import path from 'path' export default defineConfig({ plugins: [react()], resolve: { alias: { '@': path.resolve(__dirname, './src'), }, }, build: { outDir: 'extension/dist', rollupOptions: { output: { entryFileNames: `${process.env.COMPONENT || 'custom'}.js`, assetFileNames: `[name].[ext]` } } } })
``````
