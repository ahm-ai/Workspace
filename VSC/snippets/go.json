{
	"Print Green Text": {
		"prefix": "fmtpg",
		"body": [
			"fmt.Println(\"\\033[32m\" + $1 + \"\\033[0m\")"
		],
		"description": "Print text in green in the console"
	},
	"Print Bold Green Text": {
		"prefix": "fmtpgb",
		"body": [
			"fmt.Println(\"\\033[1;32m\" + $1 + \"\\033[0m\")"
		],
		"description": "Print text in bold green in the console"
	},
	"Print Purple Text": {
		"prefix": "fmtpp",
		"body": [
			"fmt.Println(\"\\033[35m\" + $1 + \"\\033[0m\")"
		],
		"description": "Print text in purple in the console"
	},
	"Print Bold Purple Text": {
		"prefix": "fmtppb",
		"body": [
			"fmt.Println(\"\\033[1;35m\" + $1 + \"\\033[0m\")"
		],
		"description": "Print text in bold purple in the console"
	},
	"Log Structured Value": {
		"prefix": "_LogValue",
		"body": [
			"func LogValue(title string, v interface{}, depth int) {",
			"\trv := reflect.ValueOf(v)",
			"\tprefix := strings.Repeat(\"  \", depth)",
			"\tcolor := \"\\033[35m\"",
			"\treset := \"\\033[0m\"",
			"",
			"\t// Print the title with color at the top level",
			"\tif depth == 0 && title != \"\" {",
			"\t\tfmt.Println(\"\\u001b[32;1m\" + title + reset)",
			"\t}",
			"",
			"\tswitch rv.Kind() {",
			"\tcase reflect.Slice, reflect.Array:",
			"\t\tfmt.Println(color + prefix + \"[\" + reset)",
			"\t\tfor i := 0; i < rv.Len(); i++ {",
			"\t\t\tLogValue(\"\", rv.Index(i).Interface(), depth+1) // Corrected, title is empty for nested",
			"\t\t}",
			"\t\tfmt.Println(color + prefix + \"]\" + reset)",
			"\tcase reflect.Map:",
			"\t\tfmt.Println(color + prefix + \"{\" + reset)",
			"\t\tfor _, key := range rv.MapKeys() {",
			"\t\t\tfmt.Print(color + prefix + \"  \" + fmt.Sprint(key) + \": \" + reset)",
			"\t\t\tLogValue(\"\", rv.MapIndex(key).Interface(), depth+1) // Corrected, title is empty for nested",
			"\t\t}",
			"\t\tfmt.Println(color + prefix + \"}\" + reset)",
			"\tcase reflect.Struct:",
			"\t\tfmt.Println(color + prefix + \"{\" + reset)",
			"\t\tfor i := 0; i < rv.NumField(); i++ {",
			"\t\t\tfield := rv.Type().Field(i)",
			"\t\t\tif field.PkgPath == \"\" { // Exported field",
			"\t\t\t\tfmt.Print(color + prefix + \"  \" + field.Name + \": \" + reset)",
			"\t\t\t\tLogValue(\"\", rv.Field(i).Interface(), depth+1) // Corrected, title is empty for nested",
			"\t\t\t}",
			"\t\t}",
			"\t\tfmt.Println(color + prefix + \"}\" + reset)",
			"\tcase reflect.Ptr, reflect.Interface:",
			"\t\tif !rv.IsNil() {",
			"\t\t\tLogValue(\"\", rv.Elem().Interface(), depth) // Corrected, title is empty for nested",
			"\t\t} else {",
			"\t\t\tfmt.Println(color + prefix + \"nil\" + reset)",
			"\t\t}",
			"\tdefault:",
			"\t\tfmt.Println(color + prefix + fmt.Sprintf(\"%v\", rv) + reset)",
			"\t}",
			"}"
		],
		"description": "Logs a value's structure including slices, arrays, maps, and structs, with optional proto message handling."
	}
}