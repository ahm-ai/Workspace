{
	"Print Green Text": {
		"prefix": "fmtpg",
		"body": [
			"fmt.Println(\"\\033[32m\" + $1 + \"\\033[0m\")"
		],
		"description": "Print text in green in the console"
	},
	"Print Bold Green Text": {
		"prefix": "fmtpgb",
		"body": [
			"fmt.Println(\"\\033[1;32m\" + $1 + \"\\033[0m\")"
		],
		"description": "Print text in bold green in the console"
	},
	"Print Purple Text": {
		"prefix": "fmtpp",
		"body": [
			"fmt.Println(\"\\033[35m\" + $1 + \"\\033[0m\")"
		],
		"description": "Print text in purple in the console"
	},
	"Print Bold Purple Text": {
		"prefix": "fmtppb",
		"body": [
			"fmt.Println(\"\\033[1;35m\" + $1 + \"\\033[0m\")"
		],
		"description": "Print text in bold purple in the console"
	},
	"Log Structured Value": {
		"prefix": "LogValue",
		"body": [
			"func LogValue(v interface{}, depth int) {",
			"\trv := reflect.ValueOf(v)",
			"\tprefix := strings.Repeat(\"  \", depth)",
			"",
			"\tswitch rv.Kind() {",
			"\tcase reflect.Slice, reflect.Array:",
			"\t\tfmt.Println(prefix + \"[\")",
			"\t\tfor i := 0; i < rv.Len(); i++ {",
			"\t\t\tLogValue(rv.Index(i).Interface(), depth+1)",
			"\t\t}",
			"\t\tfmt.Println(prefix + \"]\")",
			"\tcase reflect.Map:",
			"\t\tfmt.Println(prefix + \"{\")",
			"\t\tfor _, key := range rv.MapKeys() {",
			"\t\t\tfmt.Print(prefix, \"  \", key, \": \")",
			"\t\t\tLogValue(rv.MapIndex(key).Interface(), depth+1)",
			"\t\t}",
			"\t\tfmt.Println(prefix + \"}\")",
			"\tcase reflect.Struct:",
			"\t\tfmt.Println(prefix + \"{\")",
			"\t\tfor i := 0; i < rv.NumField(); i++ {",
			"\t\t\tfield := rv.Type().Field(i)",
			"\t\t\tfmt.Print(prefix, \"  \", field.Name, \": \")",
			"\t\t\tLogValue(rv.Field(i).Interface(), depth+1)",
			"\t\t}",
			"\t\tfmt.Println(prefix + \"}\")",
			"\tdefault:",
			"\t\tif msg, ok := v.(proto.Message); ok {",
			"\t\t\tmarshaledJson, err := protojson.Marshal(msg)",
			"\t\t\tif err == nil {",
			"\t\t\t\tfmt.Printf(\"%s%s\\n\", prefix, string(marshaledJson))",
			"\t\t\t} else {",
			"\t\t\t\tfmt.Printf(\"%sFailed to marshal proto message to JSON: %v\\n\", prefix, err)",
			"\t\t\t}",
			"\t\t} else {",
			"\t\t\tfmt.Printf(\"%s%v\\n\", prefix, rv.Interface())",
			"\t\t}",
			"\t}",
			"}"
		],
		"description": "Logs a value's structure including slices, arrays, maps, and structs, with optional proto message handling."
	}
}